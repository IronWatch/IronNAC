@page "/portal/staff"
@using CaptivePortal.Database
@using CaptivePortal.Database.Entities
@using CaptivePortal.Models
@using CaptivePortal.Services
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@inject NavigationManager navigationManager
@inject RadiusDisconnector disconnector
@inject WebAuthenticationService webAuthService
@inject ProtectedLocalStorage protectedLocalStorage
@inject CaptivePortalDbContext db

<PageTitle>Captive Portal > Staff</PageTitle>

<div class="w-100 d-flex justify-content-center p-2">
    <div class="card bg-body-tertiary shadow flex-grow-1 p-4" style="max-width: 600px;">
        <h1 class="text-center">IronNAC</h1>
        <h3 class="text-center">Network Access Control</h3>

        <hr />

        @if (Device is not null && AccessToken is not null)
        {
            @if (AuthorizedUntil is null && RegisterFailure is null)
            {
                
                <div class="alert alert-warning" role="alert">
                    <h5>Heads Up!</h5>
                    <p>Your device will disconnect from the Wifi network. Most devices will reconnect automatically.</p>
                    <p>If your device does not reconnect automatically, you will need to manually reconnect to the Wifi network!</p>
                </div>
                <h5 class="text-center">Hello @AccessToken.Name</h5>
                <button class="btn btn-primary btn-lg mb-3" @onclick="async _ => await RegisterAsync()">Register this Device</button>
                <button class="btn btn-outline-warning" @onclick="DoLogout">Not you? Logout</button>

            }
            else
            {
                <h5 class="text-center">This device is authorized until <code>@AuthorizedUntil</code></h5>

                @if (RegisterFailure is not null)
                {
                    <div class="alert alert-danger" role="alert">
                        @RegisterFailure
                    </div>
                }
                else
                {
                    <div class="alert alert-info" role="alert">
                        You may close this browser window. If your device did not automatically reconnect to the Wifi network, please do so now.
                    </div>
                }
            }
        }

        <hr />

        <p class="text-center">Need Support? <a href="https://ironwatch.net/" target="_blank">Contact IronWatch LLC</a></p>
    </div>
</div>

@code {
    public Device? Device { get; set; }
    public AccessToken? AccessToken { get; set; }

    public DateTime? AuthorizedUntil { get; set; }
    public string? RegisterFailure { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        var deviceResult = await protectedLocalStorage.GetAsync<Device>(nameof(Device));
        Device = deviceResult.Value;
        if (!deviceResult.Success || Device is null)
        {
            navigationManager.NavigateTo("/portal");
            return;
        }

        AccessToken = await webAuthService.WebCheckLoggedInAsync(protectedLocalStorage);
        if (AccessToken is null)
        {
            navigationManager.NavigateTo("/login?redirect=%2Fportal%2Fstaff&return=%2Fportal");
            return;
        }

        await protectedLocalStorage.DeleteAsync(nameof(Device));
        await InvokeAsync(StateHasChanged);
    }

    private async Task RegisterAsync()
    {
        if (this.Device is null || this.AccessToken is null) return;

        AuthorizedUntil = DateTime.UtcNow.AddDays(30);

        await db.Devices
            .Where(x => x.Id == this.Device.Id)
            .ExecuteUpdateAsync(x => x
                .SetProperty(p => p.Authorized, true)
                .SetProperty(p => p.AuthorizedUntil, AuthorizedUntil)
            );

        Device? reloadedDevice = await db.Devices
            .AsNoTracking()
            .Where(x => x.Id == this.Device.Id)
            .FirstOrDefaultAsync();
        if (reloadedDevice is null ||
            !await disconnector.Disconnect(reloadedDevice))
        {
            RegisterFailure = "Could not automatically disconnect and reconnect your device! Please manually disconnect and reconnect to the Wifi Network!";
        }
    }

    private void DoLogout()
    {
        navigationManager.NavigateTo("/logout?redirect=%2Fportal");
        return;
    }
}
