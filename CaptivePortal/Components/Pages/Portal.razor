@page "/portal"
@using System.Net
@using CaptivePortal.Database
@using CaptivePortal.Database.Entities
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@implements IDisposable
@inject NavigationManager navigationManager
@inject IServiceProvider serviceProvider
@inject CaptivePortalDbContext db
@inject RadiusDisconnector disconnector
@inject IHttpContextAccessor httpContextAccessor

<PageTitle>Captive Portal</PageTitle>

<h1>Wifi Captive Portal</h1>

@if (DetectedIPAddress is null)
{
    <p>Your device&apos;s IP address could not be determined. Please contact the IT Support Team</p>
}
else if (Device?.DeviceMac is null)
{
    <p>Please wait while your device MAC address is detected. This should only take a moment.</p>
}
else if (Device?.AuthorizedUntil is null)
{
    <p>Please Login</p>
    <button class="btn btn-primary" @onclick="LoginAsync" disabled="@(Device?.DeviceMac == null)">Login</button>
}
else if (!DisconnectIssued)
{
    <p>You are logged in. This device is not registered.</p>
    <p>You will be disconnected from the wifi network and we will attempt to automatically reconnect your device. If for some reason this process fails, or you have disabled automatic reconnection on your device, you will need to manually re-connect to this Wifi Network.</p>
    <button class="btn btn-primary" @onclick="ConnectAsync" disabled="@(Device?.DeviceMac == null)">Register this Device</button>
}
else
{
    <p>Your access is enabled. Feel free to close this page and continue browsing!</p>
}

@code {

    [SupplyParameterFromQuery(Name="redirect")]
    public string? Redirect { get; set; }
    public bool DisconnectIssued { get; set; }

    public IPAddress? DetectedIPAddress { get; set; }
    public Device? Device { get; set; }

    private Timer? timer;

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;

        timer = new(async _ =>
        {
            await CheckDatabaseAsync();
            await InvokeAsync(StateHasChanged);
        }, null, 0, 1000);
    }

    public void Dispose()
    {
        timer?.Dispose();
    }

    private async Task CheckDatabaseAsync()
    {
        using IServiceScope scope = serviceProvider.CreateScope();
        CaptivePortalDbContext scopedDb = scope.ServiceProvider.GetRequiredService<CaptivePortalDbContext>();

        DetectedIPAddress = httpContextAccessor.HttpContext?.Connection?.RemoteIpAddress;
        if (DetectedIPAddress is null) return;

        Device = await scopedDb.Devices
            .AsNoTracking()
            .Where(x => x.DeviceIpAddress == DetectedIPAddress.ToString())
            .FirstOrDefaultAsync();
    }

    private async Task LoginAsync()
    {
        if (Device is null) return;

        Device.AuthorizedUntil
            = DateTime.UtcNow.AddSeconds(60);
        db.Update(Device);
        await db.SaveChangesAsync();
    }

    private async Task ConnectAsync()
    {
        if (Device?.DeviceMac is null) return;

        timer?.Dispose();

        DisconnectIssued = await disconnector.Disconnect(Device.DeviceMac);
    }
}