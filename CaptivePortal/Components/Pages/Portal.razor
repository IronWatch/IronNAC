@page "/portal"
@using System.Net
@using CaptivePortal.Database
@using CaptivePortal.Database.Entities
@using CaptivePortal.Services
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@implements IDisposable
@inject NavigationManager navigationManager
@inject IServiceProvider serviceProvider
@inject CaptivePortalDbContext db
@inject RadiusDisconnector disconnector
@inject IHttpContextAccessor httpContextAccessor
@inject WebAuthenticationService webAuthService

<PageTitle>Captive Portal</PageTitle>

<h1>Wifi Captive Portal</h1>

@if (DetectedIPAddress is null ||
    Device is null)
{
    <p>Please wait while we detect your device connection.</p>
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
    <button class="btn btn-primary" @onclick="ReloadPage">Reload Page</button>
}
else
{
    <p>Your Device&apos;s MAC Address: </p>
    <h3 class="text-decoration-underline">@Device.DeviceMac</h3>

    @if (!Device.Authorized || Device.AuthorizedUntil <= DateTime.UtcNow)
    {
        @if (RegistrationType == "staff")
        {
            <h2>Staff / Faculty Device Registration</h2>
            @if (StaffRegistrationValidLogin != true)
            {
                <label>
                    Email Address:
                    <input type="email" @bind="StaffRegistrationEmail" />
                </label>         <label>
                    Registration Code:
                    <input type="password" @bind="StaffRegistrationPassword" />
                </label>
                @if (StaffRegistrationValidLogin == false)
                {
                    <p>Incorrect Login Information!</p>
                }
                <button class="btn btn-primary" @onclick="StaffLogin">Login</button>
            }
            else
            {
                <h3>Heads Up!</h3>
                <p>Your device will disconnect from the Wifi network. Most devices will reconnect automatically.</p>
                <p>If your device does not reconnect automatically, you will need to manually reconnect to the Wifi network!</p>
                <button class="btn btn-primary" @onclick="async _ => await RegisterAsync()">Register this Device</button>
            }
        }
        else if (RegistrationType == "guest")
        {
            <h2>Student / Guest Device Registration</h2>
            <h3>Heads Up!</h3>
            <p>Your device will disconnect from the Wifi network. Most devices will reconnect automatically.</p>
            <p>If your device does not reconnect automatically, you will need to manually reconnect to the Wifi network!</p>
            <button class="btn btn-primary" @onclick="async _ => await RegisterAsync()">Register this Device</button>
        }
        else
        {
            <p>This device is not yet registered. How would you like to register it?</p>
            <button class="btn btn-primary" @onclick="StartRegisterStaff">I am a Staff / Faculty Member</button>
            <button class="btn btn-primary" @onclick="StartRegisterGuest">I am a Student / Guest</button>
        }
    }
    else
    {
        <p>This device is authorized until @Device.AuthorizedUntil</p>
        <button class="btn btn-primary" @onclick="async _ => await DisconnectDevice(Device)">Reconnect Device</button>
        <button class="btn btn-danger" @onclick="async _ => await RemoveDevice(Device)">Remove Device Authorization</button>
    }
}

@code {

    [SupplyParameterFromQuery(Name="redirect")]
    public string? Redirect { get; set; }

    public IPAddress? DetectedIPAddress { get; set; }
    public Device? Device { get; set; }

    public string? RegistrationType { get; set; }

    public string? StaffRegistrationEmail { get; set; }
    public string? StaffRegistrationPassword { get; set; }
    public bool? StaffRegistrationValidLogin { get; set; }

    private Timer? timer;

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;

        timer = new(async _ =>
        {
            await PollForDeviceInfo();
        }, null, 0, 1000);
    }

    public void Dispose()
    {
        timer?.Dispose();
    }

    public void ReloadPage()
    {
        navigationManager.Refresh(true);
    }

    private async Task PollForDeviceInfo()
    {
        if (DetectedIPAddress is null)
        {
            DetectedIPAddress = httpContextAccessor.HttpContext?.Connection?.RemoteIpAddress;
            await InvokeAsync(StateHasChanged);
            if (DetectedIPAddress is null) return;
        }

        using IServiceScope scope = serviceProvider.CreateScope();
        CaptivePortalDbContext scopedDb = scope.ServiceProvider.GetRequiredService<CaptivePortalDbContext>();

        Device = await scopedDb.Devices
            .AsNoTracking()
            .Where(x => x.DetectedDeviceIpAddress == DetectedIPAddress.ToString())
            .FirstOrDefaultAsync();
        await InvokeAsync(StateHasChanged);
        if (Device is null) return;

        timer?.Change(Timeout.Infinite, Timeout.Infinite);
        timer?.Dispose();
    }

    private void StartRegisterStaff()
    {
        this.RegistrationType = "staff";
        StateHasChanged();
    }

    private void StartRegisterGuest()
    {
        this.RegistrationType = "guest";
        StateHasChanged();
    }

    private async Task StaffLogin()
    {
        this.StaffRegistrationValidLogin = await webAuthService.ValidateLoginAsync(
            this.StaffRegistrationEmail, this.StaffRegistrationPassword);
    }

    private async Task RegisterAsync()
    {
        if (this.Device is null) return;

        DateTime authorizedUntil = DateTime.UtcNow.AddHours(8);

        await db.Devices
            .Where(x => x.Id == this.Device.Id)
            .ExecuteUpdateAsync(x => x
                .SetProperty(p => p.Authorized, true)
                .SetProperty(p => p.AuthorizedUntil, authorizedUntil)
            );

        Device? reloadedDevice = await db.Devices
            .AsNoTracking()
            .Where(x => x.Id == this.Device.Id)
            .FirstOrDefaultAsync();
        if (reloadedDevice is null) return; // Error message

        await DisconnectDevice(reloadedDevice);
    }

    private Task DisconnectDevice(Device device)
    {
        return disconnector.Disconnect(device);
    }

    private async Task RemoveDevice(Device device)
    {
        await db.Devices
            .Where(x => x.Id == device.Id)
            .ExecuteDeleteAsync();

        await DisconnectDevice(device);
    }
}