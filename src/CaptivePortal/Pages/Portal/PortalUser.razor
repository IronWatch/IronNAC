@page "/portal/user"
@using CaptivePortal.Database
@using CaptivePortal.Database.Entities
@using CaptivePortal.Models
@using CaptivePortal.Services
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.EntityFrameworkCore
@inject NavigationManager navigationManager
@inject RadiusDisconnectorService disconnector
@inject WebAuthenticationService webAuthService
@inject ProtectedLocalStorage protectedLocalStorage
@inject CaptivePortalDbContext db

<PageTitle>Captive Portal > Staff</PageTitle>

<CheckPermissions Level="PermissionLevel.User" Return="/portal">
    @if (device is not null && AuthenticateUser?.AccessToken is not null)
    {
        @if (authorizedUntil is null && registerFailure is null)
        {
            <h4 class="text-center">Hello @AuthenticateUser.AccessToken.Name</h4>
        
            @if (!nickNameSet && !nickNameCustom)
            {
                <h5 class="text-center">Select your device type</h5>
                <div class="d-flex justify-content-evenly">
                    <button class="btn btn-outline-info m-2" style="width: 120px; height: 120px;" @onclick="@(_ => {nickName = "Laptop"; nickNameSet = true;})">
                        <span class="mdi mdi-laptop mdi-48px"></span><br/>
                        <span>Laptop</span>
                    </button>
                    <button class="btn btn-outline-info m-2" style="width: 120px; height: 120px;" @onclick="@(_ => {nickName = "Desktop"; nickNameSet = true;})">
                        <span class="mdi mdi-monitor mdi-48px"></span><br />
                        <span>Desktop</span>
                    </button>
                </div>
                <div class="d-flex justify-content-evenly mb-4">
                    <button class="btn btn-outline-info m-2" style="width: 120px; height: 120px;" @onclick="@(_ => {nickName = "Phone"; nickNameSet = true;})">
                        <span class="mdi mdi-cellphone mdi-48px"></span><br />
                        <span>Phone</span>
                    </button>
                    <button class="btn btn-outline-info m-2" style="width: 120px; height: 120px;" @onclick="@(_ => {nickNameCustom = true;})">
                        <span class="mdi mdi-tag-text-outline mdi-48px"></span><br />
                        <span>Other</span>
                    </button>
                </div>
            }
            else if (!nickNameSet)
            {
                <label>Name This Device:</label>
                <form @onsubmit="_ => nickNameSet = true">
                    <input class="w-100 me-2 fs-4 mb-3" type="text" @bind="nickName" @ref="nickNameInputReference" />
                    <button class="d-block w-100 btn btn-primary btn-lg mb-3">Choose Name</button>
                </form>
            }
            else if (selectedNetworkGroup is null)
            {
                <h5 class="text-center">Select your Network</h5>

                @foreach (NetworkGroup networkGroup in networkGroups)
                {
                    <div class="card p-3 mt-4" @onclick="@(_ => selectedNetworkGroup = networkGroup)">
                        <h3>@networkGroup.Name</h3>
                        <p class="mt-2 mb-1">
                            Pooled: <code>@(networkGroup.IsPool ? "YES" : "NO")</code><br />
                            Networks: <code>@networkGroup.Networks.Count</code><br />
                            <code>@(networkGroupUsage.GetValueOrDefault(networkGroup.Id))</code> of <code>@(networkGroupCapacity.GetValueOrDefault(networkGroup.Id))</code> addresses in use
                        </p>
                        <div class="d-flex align-items-center">
                            <div class="progress flex-grow-1" style="height: 32px;">
                                <div class="progress-bar overflow-visible" style="@($"width: {GetGroupUsagePercentage(networkGroup.Id)};")">
                                    <span class="p-2 fs-5">@(GetGroupUsagePercentage(networkGroup.Id)) Full</span>
                                </div>
                            </div>
                        </div>
                    </div>
                }

            }
            else if (!selectedNetworkGroup.IsPool && selectedNetwork is null)
            {
                <h5 class="text-center">Select your Network</h5>
            }
            else
            {
                <div class="alert alert-warning" role="alert">
                    <h5>Heads Up!</h5>
                    <p>Registering your device will disconnect it from the Wifi network. Most devices will reconnect automatically.</p>
                    <p>If your device does not reconnect automatically, you will need to manually reconnect to the Wifi network!</p>
                </div>

                <button class="btn btn-primary btn-lg mb-3" @onclick="async _ => await RegisterAsync()">Register this Device</button>
            }

            @if (nickName is not null || nickNameCustom)
            {
                <button class="btn btn-outline-info mt-3" @onclick="_ => {nickNameSet = false; nickNameCustom = false; nickName = null;}">Back To Select A Device Type</button>
            }

            <button class="btn btn-outline-warning mt-3" @onclick="DoLogout">Not You? Logout</button>
        }
        else
        {
            <h5 class="text-center">This device is authorized until <code>@authorizedUntil</code></h5>

            @if (registerFailure is not null)
            {
                <div class="alert alert-danger" role="alert">
                    @registerFailure
                </div>
            }
            else
            {
                <div class="alert alert-info" role="alert">
                    You may close this browser window. If your device did not automatically reconnect to the Wifi network, please do so now.
                </div>
            }
        }
    }
</CheckPermissions>

@code {
    [CascadingParameter]
    public AuthenticateUser? AuthenticateUser { get; set; }

    private Device? device;

    private List<NetworkGroup> networkGroups = new();
    private Dictionary<int, int> networkGroupCapacity = new();
    private Dictionary<int, int> networkGroupUsage = new();

    private NetworkGroup? selectedNetworkGroup;
    private Network? selectedNetwork;

    private bool nickNameSet;
    private bool nickNameCustom;
    private string? nickName;
    private ElementReference nickNameInputReference;
    private bool hasFocusedNickNameInput;

    private DateTime? authorizedUntil;
    private string? registerFailure;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (nickNameCustom && !hasFocusedNickNameInput)
        {
            await nickNameInputReference.FocusAsync();
            hasFocusedNickNameInput = true;
        }

        if (!firstRender) return;

        var deviceResult = await protectedLocalStorage.GetAsync<Device>(nameof(Device));
        device = deviceResult.Value;
        if (!deviceResult.Success || device is null)
        {
            navigationManager.NavigateTo("/portal");
            return;
        }

        await GetNetworkGroups();

        await InvokeAsync(StateHasChanged);
    }

    private async Task GetNetworkGroups()
    {
        if (AuthenticateUser?.AccessToken is null) return;

        if (AuthenticateUser.AccessToken.PermissionLevel == PermissionLevel.Admin)
        {
            networkGroups = await db.NetworkGroups
                .Where(x => !x.Registration)
                .Include(x => x.Networks)
                .ToListAsync();
        }
        else
        {
            networkGroups = await db.UserNetworkGroups
                .Where(x => x.UserId == AuthenticateUser.AccessToken.UserId)
                .Select(x => x.NetworkGroup)
                .Include(x => x.Networks)
                .ToListAsync();
        }

        networkGroupCapacity = (await db.Networks
            .GroupBy(x => x.NetworkGroupId)
            .Select(x => new KeyValuePair<int, int>(x.Key, x.Sum(y => y.Capacity)))
            .ToListAsync())
            .ToDictionary();

        networkGroupUsage = (await db.Networks
            .GroupBy(x => x.NetworkGroupId)
            .Select(x => new KeyValuePair<int, int>(x.Key, x.Sum(y => y.DeviceNetworks.Count)))
            .ToListAsync())
            .ToDictionary();
    }

    private string GetGroupUsagePercentage(int networkGroupId)
    {
        int capacity = networkGroupCapacity.GetValueOrDefault(networkGroupId);
        int usage = networkGroupUsage.GetValueOrDefault(networkGroupId);
        if (usage == 0) return "0%";
        if (capacity == usage) return "100%";

        int percentage = Convert.ToInt32(Math.Ceiling((float)usage * 100f / (float)capacity));
        // If we rounded up to 100% but aren't actually capacity == usage then set to 99%
        if (percentage == 100) percentage = 99;

        return $"{percentage}%";
    }

    private void SelectNetworkGroup(ChangeEventArgs e)
    {
        if (e.Value is null) return;
        selectedNetworkGroup = networkGroups
            .Where(x => x.Id == (int)e.Value)
            .FirstOrDefault();
    }

    private void SelectNetwork(ChangeEventArgs e)
    {
        if (e.Value is null || selectedNetworkGroup is null) return;
        selectedNetwork = selectedNetworkGroup.Networks
            .Where(x => x.Id == (int)e.Value)
            .FirstOrDefault();
    }

    private async Task RegisterAsync()
    {
        if (this.device is null || selectedNetworkGroup is null) return;

        authorizedUntil = DateTime.UtcNow.AddDays(30);

        await db.Devices
            .Where(x => x.Id == this.device.Id)
            .ExecuteUpdateAsync(x => x
                .SetProperty(p => p.NickName, nickName)
                .SetProperty(p => p.Authorized, true)
                .SetProperty(p => p.AuthorizedUntil, authorizedUntil)
            );

        await db.DeviceNetworks
            .Where(x => x.DeviceId == device.Id)
            .ExecuteDeleteAsync();

        if (selectedNetwork is null && !selectedNetworkGroup.IsPool) return;
        if(selectedNetwork is null)
        {
            selectedNetwork = await db.Networks
                .Where(x => x.NetworkGroupId == selectedNetworkGroup.Id)
                .Where(x => x.DeviceNetworks.Count < x.Capacity)
                .FirstOrDefaultAsync();
        }
        if (selectedNetwork is null) return;

        DeviceNetwork deviceNetwork = new()
        {
            DeviceId = device.Id,
            NetworkId = selectedNetwork.Id
        };
        db.Add(deviceNetwork);
        await db.SaveChangesAsync();

        Device? reloadedDevice = await db.Devices
            .AsNoTracking()
            .Where(x => x.Id == this.device.Id)
            .FirstOrDefaultAsync();
        if (reloadedDevice is null ||
            !await disconnector.Disconnect(reloadedDevice))
        {
            registerFailure = "Could not automatically disconnect and reconnect your device! Please manually disconnect and reconnect to the Wifi Network!";
        }

        await protectedLocalStorage.DeleteAsync(nameof(device));
    }

    private void DoLogout()
    {
        navigationManager.NavigateTo("/logout?redirect=%2Fportal");
        return;
    }
}
