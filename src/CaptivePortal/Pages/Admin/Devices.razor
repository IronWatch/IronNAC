@page "/admin/devices"
@layout AdminLayout
@using CaptivePortal.Database.Entities
@using CaptivePortal.Database
@using CaptivePortal.Services
@using Microsoft.EntityFrameworkCore
@implements IDisposable
@inject RadiusDisconnectorService disconnector
@inject IDbContextFactory<CaptivePortalDbContext> dbFactory

<PageTitle>Admin > Devices</PageTitle>

<div class="container-sm" >
    <h1 class="text-center mt-sm-4">Devices</h1>
    <div>
        @foreach (Device device in devices)
        {
            <div class="card">
                <h5>@device.DeviceMac</h5>
                <span>Authorized: @device.AuthorizedUntil</span>
                <button class="btn btn-danger" @onclick="@(async _ => await RemoveDevice(device))">Remove DeviceS</button>
            </div>
        }
    </div>
</div>

@code {
    private List<Device> devices = new();

    private CaptivePortalDbContext? db;

    public void Dispose()
    {
        db?.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        await RefreshData();
    }

    private async Task RefreshData()
    {
        if (db is null) db = await dbFactory.CreateDbContextAsync();

        devices = await db.Devices
            .AsNoTracking()
            .ToListAsync();

        await InvokeAsync(StateHasChanged);
    }

    private async Task RemoveDevice(Device device)
    {       
        if (db is null) db = await dbFactory.CreateDbContextAsync();
        
        await db.Devices
            .Where(x => x.Id == device.Id)
            .ExecuteDeleteAsync();

        _ = await disconnector.Disconnect(device);

        await RefreshData();
    }
}
