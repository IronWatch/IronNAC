@page "/admin/networks/groups"
@using CaptivePortal.Database
@using CaptivePortal.Database.Entities
@using Microsoft.EntityFrameworkCore
@layout AdminLayout
@inject CaptivePortalDbContext db

<PageTitle>Admin > Networks Groups</PageTitle>

<div class="container-sm" style="max-width: 720px;">
    <h1 class="text-center mt-sm-4">Network Groups</h1>

    <hr />

    @if (newNetworkGroup is not null)
    {
        <div class="card p-4 mt-4">
            <form class="d-block w-100" @onsubmit="async _ => await CreateNetworkGroup()">
                <label class="d-block">Network Group Name</label>
                <input class="d-block w-100" type="text" @bind="newNetworkGroup.CustomName" @ref="newNetworkGroupReference" />

                <div class="mt-2 form-check form-switch d-flex align-items-center">
                    <input type="checkbox" class="form-check-input" style="padding: 12px 24px;" role="switch" @bind="newNetworkGroup.IsPool"/>
                    <label class="form-check-label ms-2">Pool Networks Together</label>
                </div>

                <div class="d-flex justify-content-end">
                    <button class="d-block btn btn-primary" type="submit">Create</button>
                    <button class="d-block btn btn-outline-secondary ms-2" type="button" @onclick="_ => newNetworkGroup = null">Cancel</button>
                </div>
            </form>
        </div>
    }
    else
    {
        <div class="d-flex justify-content-center">
            <button class="btn btn-primary" @onclick="@(async _ => await NewNetworkGroup())">New Network Group</button>
        </div>
    }

    <hr/>

    @foreach (NetworkGroup networkGroup in networkGroups)
    {
        <div class="card p-4 mt-4">
            <div class="d-flex justify-content-between">
                <div class="flex-grow-1 d-flex flex-column flex-sm-row">
                    <h3>@networkGroup.Name</h3>
                    <span>
                        @if (networkGroup.Registration)
                        {
                            <span class="badge bg-danger mx-1">Registration</span>
                        }
                        @if (networkGroup.Guest)
                        {
                            <span class="badge bg-success mx-1">Guest</span>
                        }
                        @if (networkGroup.IsPool)
                        {
                            <span class="badge bg-primary mx-1">Pooled</span>
                        }
                    </span>
                </div>
                <button class="d-none d-sm-block btn btn-warning" type="submit">Edit</button>
            </div>
            <p>@networkGroup.Networks.Count networks in group with @networkGroup.TotalDevices of @networkGroup.TotalCapacity addresses in use</p>
            <div class="progress" style="height: 32px;">
                <div class="progress-bar overflow-visible" style="width: @((int)Math.Floor(networkGroup.FillPercentage * 100))%;">
                    <span class="p-2 fs-5">@(networkGroup.FillPercentage * 100)% Full</span>
                </div>
            </div>
            <button class="d-block d-sm-none btn btn-warning mt-4" type="submit">Edit</button>
        </div>
    }
</div>

@code {
    private List<NetworkGroup> networkGroups = new();

    private NetworkGroup? newNetworkGroup;
    private bool hasFocusedNewNetworkGroup = false;
    private ElementReference newNetworkGroupReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (newNetworkGroup is not null &&
           !hasFocusedNewNetworkGroup)
        {
            hasFocusedNewNetworkGroup = true;
            await newNetworkGroupReference.FocusAsync();
        }

        if (!firstRender) return;

        await Refresh();

        await InvokeAsync(StateHasChanged);
    }

    private async Task Refresh()
    {
        networkGroups = await db.NetworkGroups
            .Include(x => x.Networks)
            .OrderByDescending(x => x.Registration)
            .ThenByDescending(x => x.Guest)
            .ToListAsync();
    }

    private async Task NewNetworkGroup()
    { 
        newNetworkGroup = new NetworkGroup();
        await InvokeAsync(StateHasChanged);
    }

    private async Task CreateNetworkGroup()
    {
        if (newNetworkGroup is null) return;

        db.NetworkGroups.Add(newNetworkGroup);
        await db.SaveChangesAsync();

        newNetworkGroup = null;
        hasFocusedNewNetworkGroup = false;

        await Refresh();
        await InvokeAsync(StateHasChanged);
    }

}